<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Jump2 MkApi Manual</TITLE>
<META NAME="Template" CONTENT="D:\Program Files\Microsoft Office\Office\html.dot">
</HEAD>
<BODY TEXT="#000000" LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<TABLE CELLSPACING=0 BORDER=0 CELLPADDING=10 WIDTH=620>
<TR><TD WIDTH="21%" VALIGN="MIDDLE">
<H1><IMG SRC="min-logo.gif" WIDTH=128 HEIGHT=121></H1></TD>
<TD WIDTH="79%" VALIGN="MIDDLE">
<H1>Jump2 MkApi Developer's Manual</H1>
<H2>Version 2.2</H2>
<P>10-Feb-2004 originally by Ralf Kleberhoff ( <A HREF="mailto:kleberhoff@aol.com">kleberhoff@aol.com</A> ), updated by Peter M Dickerson</TD>
</TR>
</TABLE>

<P>Watch the newsgroup <A HREF="news://news.superwaba.net/pilot.programmer.jump">pilot.programmer.jump</A> on the server news.superwaba.net.</P>
<P>The current version can be found at <A HREF="http://sourceforge.net/projects/jump">http://sourceforge.net/projects/jump</A></P>
<P><HR></P>
<H3>LICENSE</H3>
<P><A HREF="jump2.htm">Jump2</A> is distributed under the <A HREF="Copying.txt">GNU GENERAL PUBLIC LICENSE (version 2)</A>, </P>
<P>Copyright &copy; 1996/97 by Greg Hewgill<BR>
Copyright &copy; 2000 by Ralf Kleberhoff<BR>
Copyright &copy; 2001-2004 by Peter M Dickerson</P>
<P>This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</P>
<P>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</P>
<P><HR></P>
<H1>What is MkApi?</H1>
<TABLE BORDER CELLSPACING=1 WIDTH=624>
<TR><TD VALIGN="MIDDLE">
<P>WARNING: If you think that some PalmOS system trap is missing for Jump2, then MkApi helps you interfacing to that function. Otherwise, DO NOT USE MkApi!</TD>
</TR>
</TABLE>

<P>If you read and fully understood this warning, the rest of this page explains how to do it.</P>
<P>Jump interfaces to PalmOS via classes and methods in the 'palmos' package. PalmOS system traps are accessed as static native methods in the class 'palmos.Palm'. Both, the 'Palm.java' source file declaring that class and the 'native-palmos.asm' assembly source file containing the native implementations are auto-generated by the tools.MkApi java program. </P>
<P>MkApi takes as its input a file named 'palmos.api' containing the definitions of all PalmOS system traps that Jump should implement. Its syntax is very close to the C syntax found in PalmOS header files. MkApi uses tables to translate from C types (including predefined types of PalmOS) to Java types and built-in rules to prepare arguments and receive return-values.</P>
<H1>Running MkApi</H1>
<P>Files expected/produced by MkApi (relative to the current directory):</P>

<UL>
<LI>MkApi reads from 'tools/palmos.api'. This file must be extracted from the Jump2 zip file. </LI>
<LI>MkApi writes 'palmos/Palm.java'. </LI>
<LI>MkApi writes 'native-palmos.asm'. </LI></UL>

<P>Add the definition of the new trap to the palmos.api file. </P>
<P>Make sure that the new trap's trap-number is defined in Pila's Pilot.inc file. If not, Pila will complain when you try to translate programs.</P>
<P>Run MkApi from the Jump2 source directory by typing</P>

<UL>
<LI>java tools.MkApi </LI></UL>

<P>Have a close look at the results. MkApi's translations from C types to Java types contain a lot of assumptions that might prove false in some cases.</P>
<P>Compile the resulting Palm.java file. </P>
<P>Make sure, '.' (the current directory) is contained in your CLASSPATH before the jumpxxx.jar file.</P>
<P>Run Jump as usual. The new traps will be available.</P>
<P>After testing, send me the new palmos.api file to include it into the next distribution.</P>
<H1>Hints</H1>
<P>The translations for parameter types and return types are inconsistent, e.g. VoidPtr as a parameter accepts Objects, but VoidPtr as a return value translates to 'int'.</P>
<P>xxxPtr types are normally translated to Java ints. This is useful only if you don't intend to access structure elements of the corresponding type.</P>
<P>But you can have VoidPtr, this one translates to java.lang.Object, and you can pass in anything as argument.</P>
<P>And you can have ByteArray, translating to byte[].</P>
<P>Where PalmOS uses CharPtr or char*, Java uses either String or StringBuffer. The palmos.api file must contain either CharPtr or CharBuf.</P>

<UL>
<LI>For input parameters, String must be used; use CharPtr in the 'palmos.api' file. </LI>
<LI>For output parameters, StringBuffer must be used; use CharBuf in the 'palmos.api' file. The caller must make sure that the StringBuffer has been initialized with enough capacity. </LI></UL>

<P><HR></P>
<ADDRESS>Jump is Copyright &copy; 1996,1997 by <A HREF="mailto:greg@hewgill.com">Greg Hewgill &lt;greg@hewgill.com&gt;</A><BR>
and Copyright &copy; 2000 by <A HREF="mailto:kleberhoff@aol.com">Ralf Kleberhoff &lt;kleberhoff@aol.com&gt;</A><BR>
and Copyright &copy; 2001-2004 by <A HREF="mailto:peter.dickerson@ukonline.co.uk">Peter M Dickerson &lt;peter.dickerson@ukonline.co.uk&gt;</A></ADDRESS>
<P><HR></P>
<FONT SIZE=2><P>Java and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries.</FONT> </P></BODY>
</HTML>
